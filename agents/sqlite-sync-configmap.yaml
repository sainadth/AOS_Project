apiVersion: v1
kind: ConfigMap
metadata:
  name: sqlite-sync-script
data:
  sqlite-sync.sh: |
    #!/bin/bash

    LOG_FILE="/var/log/sqlite-sync.log"
    exec > >(tee -a $LOG_FILE) 2>&1
    echo "Starting SQLite synchronization script with MQTT at $(date)"

    # Configuration
    SQLITE_DB_PATH="/data/agent_data.db"
    TIMESCALE_DB_HOST="3.129.21.182"
    TIMESCALE_DB_PORT="30989"
    TIMESCALE_DB_NAME="metrics"
    TIMESCALE_DB_USER="admin"
    TIMESCALE_DB_PASSWORD="admin"
    MQTT_BROKER_HOST="3.129.21.182"
    MQTT_BROKER_PORT="30050"
    MQTT_TOPIC="sync/trigger"
    MQTT_AGENT_TOPIC="agent/updates"  # New topic for agent updates

    # Export TimescaleDB credentials for psql
    export PGPASSWORD=$TIMESCALE_DB_PASSWORD

    # Verify database file exists
    if [ ! -f "$SQLITE_DB_PATH" ]; then
      echo "Error: SQLite database file $SQLITE_DB_PATH not found. Ensure the PersistentVolume is mounted correctly."
      exit 1
    fi

    # Ensure the table exists in TimescaleDB
    psql -h $TIMESCALE_DB_HOST -p $TIMESCALE_DB_PORT -U $TIMESCALE_DB_USER -d $TIMESCALE_DB_NAME -c "
    CREATE TABLE IF NOT EXISTS agent_data (
        id INTEGER PRIMARY KEY,
        agent_name TEXT NOT NULL,
        data TEXT NOT NULL
    );"

    # Ensure the log table and triggers exist in SQLite
    sqlite3 $SQLITE_DB_PATH <<EOF
    CREATE TABLE IF NOT EXISTS operation_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        operation TEXT NOT NULL,
        table_name TEXT NOT NULL,
        data TEXT NOT NULL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TRIGGER IF NOT EXISTS log_insert AFTER INSERT ON agent_data
    BEGIN
        INSERT INTO operation_log (operation, table_name, data)
        VALUES ('INSERT', 'agent_data', json_object('id', NEW.id, 'agent_name', NEW.agent_name, 'data', NEW.data));
    END;

    CREATE TRIGGER IF NOT EXISTS log_update AFTER UPDATE ON agent_data
    BEGIN
        INSERT INTO operation_log (operation, table_name, data)
        VALUES ('UPDATE', 'agent_data', json_object('id', NEW.id, 'agent_name', NEW.agent_name, 'data', NEW.data));
    END;

    CREATE TRIGGER IF NOT EXISTS log_delete AFTER DELETE ON agent_data
    BEGIN
        INSERT INTO operation_log (operation, table_name, data)
        VALUES ('DELETE', 'agent_data', json_object('id', OLD.id, 'agent_name', OLD.agent_name, 'data', OLD.data));
    END;
    EOF

    # Function to sync data
    sync_data() {
      echo "Starting sync at $(date)"

      # Query new data from SQLite
      sqlite3 $SQLITE_DB_PATH "SELECT * FROM agent_data;" | while IFS='|' read -r id agent_name data; do
        echo "Processing row: id=$id, agent_name=$agent_name, data=$data"
        # Insert data into TimescaleDB
        psql -h $TIMESCALE_DB_HOST -p $TIMESCALE_DB_PORT -U $TIMESCALE_DB_USER -d $TIMESCALE_DB_NAME -c \
          "INSERT INTO agent_data (id, agent_name, data) VALUES ($id, '$agent_name', '$data') ON CONFLICT (id) DO NOTHING;" || echo "Failed to insert row: id=$id, agent_name=$agent_name, data=$data"
      done

      echo "Sync completed at $(date)"
    }

    # Function to publish updates
    publish_update() {
      echo "Publishing update to MQTT at $(date)"
      mosquitto_pub -h $MQTT_BROKER_HOST -p $MQTT_BROKER_PORT -t $MQTT_AGENT_TOPIC -m "Agent data updated"
    }

    # Function to process log entries
    process_log_entries() {
      echo "Processing log entries at $(date)"
      sqlite3 $SQLITE_DB_PATH "SELECT operation, data FROM operation_log ORDER BY timestamp;" | while IFS='|' read -r operation data; do
        echo "Operation: $operation, Data: $data"
        # Publish the operation and data to MQTT
        mosquitto_pub -h $MQTT_BROKER_HOST -p $MQTT_BROKER_PORT -t $MQTT_AGENT_TOPIC -m "Operation: $operation, Data: $data"
      done
      # Clear the log table after processing
      sqlite3 $SQLITE_DB_PATH "DELETE FROM operation_log;"
    }

    # Listen for MQTT messages and trigger sync
    mosquitto_sub -h $MQTT_BROKER_HOST -t $MQTT_TOPIC | while read -r message; do
      echo "Received MQTT message: $message"
      if [ "$message" == "sync" ]; then
        sync_data
      fi
    done &

    # Monitor SQLite table for updates and process log entries
    while true; do
      inotifywait -e modify /data/agent_data.db && process_log_entries
    done
